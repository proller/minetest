



!!!!!!!!!!!!!!!!!
 Merge proller/wingsuit to next failed:

# On branch next
# You have unmerged paths.
#   (fix conflicts and run "git commit")
#
# Changes to be committed:
#
#	modified:   src/environment.cpp
#	modified:   src/game.cpp
#	modified:   src/localplayer.cpp
#	modified:   src/server.cpp
#
# Unmerged paths:
#   (use "git add <file>..." to mark resolution)
#
#	both modified:      builtin/modmgr.lua
#	both added:         src/database-dummy.cpp
#	both added:         src/database-dummy.h
#	both added:         src/database-leveldb.cpp
#	both added:         src/database-leveldb.h
#	both added:         src/database-sqlite3.cpp
#	both added:         src/database-sqlite3.h
#	both added:         src/database.cpp
#	both added:         src/database.h
#	both modified:      src/main.cpp
#	both modified:      src/map.cpp
#	both modified:      src/map.h
#
diff --cc builtin/modmgr.lua
index d9579c6,6562c77..0000000
--- a/builtin/modmgr.lua
+++ b/builtin/modmgr.lua
@@@ -504,12 -504,30 +504,18 @@@ function modmgr.get_worldconfig(worldpa
  	worldconfig.global_mods = {}
  	worldconfig.game_mods = {}
  	
 -	if worldfile then
 -		local dependency = worldfile:read("*l")
 -		while dependency do
 -			local parts = dependency:split("=")
 -
 -			local key = parts[1]:trim()
 -
 -			if key == "gameid" then
 +	for key,value in pairs(worldfile:to_table()) do
 +		if key == "gameid" then
++<<<<<<< HEAD
 +			worldconfig.id = value
++=======
+ 				worldconfig.id = parts[2]:trim()
+ 			elseif key == "backend" then
+ 				worldconfig.backend = parts[2]:trim()
 -			else
 -				local key = parts[1]:trim():sub(10)
 -				if parts[2]:trim() == "true" then
 -					worldconfig.global_mods[key] = true
 -				else
 -					worldconfig.global_mods[key] = false
 -				end
 -			end
 -			dependency = worldfile:read("*l")
++>>>>>>> proller/wingsuit
 +		else
 +			worldconfig.global_mods[key] = engine.is_yes(value)
  		end
 -		worldfile:close()
 -	else
 -		print("Modmgr: " .. filename .. " not found")
  	end
  	
  	--read gamemods
@@@ -709,34 -727,29 +715,41 @@@ function modmgr.handle_configure_world_
  		
  		local filename = worldspec.path ..
  				DIR_DELIM .. "world.mt"
 -
 +		
++<<<<<<< HEAD
 +		local worldfile = Settings(filename)
 +		local mods = worldfile:to_table()
++=======
+ 		local worldfile = io.open(filename,"w")
+ 		
+ 		if worldfile then
+ 			worldfile:write("gameid = " .. modmgr.worldconfig.id .. "\nbackend = " .. modmgr.worldconfig.backend .. "\n")
 -			
 -			local rawlist = filterlist.get_raw_list(modmgr.modlist)
 -			
 -			for i=1,#rawlist,1 do
 -			
 -				if not rawlist[i].is_modpack and
 -					rawlist[i].typ ~= "game_mod" then
 -					if rawlist[i].enabled then
 -						worldfile:write("load_mod_" .. rawlist[i].name .. " = true" .. "\n")
 -					else
 -						worldfile:write("load_mod_" .. rawlist[i].name .. " = false" .. "\n")
 -					end
++>>>>>>> proller/wingsuit
 +		
 +		local rawlist = filterlist.get_raw_list(modmgr.modlist)
 +		
 +		local i,mod
 +		for i,mod in ipairs(rawlist) do
 +			if not mod.is_modpack and
 +					mod.typ ~= "game_mod" then
 +				if mod.enabled then
 +					worldfile:set("load_mod_"..mod.name, "true")
 +				else
 +					worldfile:set("load_mod_"..mod.name, "false")
  				end
 +				mods["load_mod_"..mod.name] = nil
  			end
 -			
 -			worldfile:close()
 -		else
 -			print("failed to open world config file")
 +		end
 +		
 +		-- Remove mods that are not present anymore
 +		for key,value in pairs(mods) do
 +			if key:sub(1,9) == "load_mod_" then
 +				worldfile:remove(key)
 +			end
 +		end
 +		
 +		if not worldfile:write() then
 +			print("failed to write world config file")
  		end
  		
  		modmgr.modlist = nil
diff --cc src/database-dummy.cpp
index acc19ca,9ca0e73..0000000
--- a/src/database-dummy.cpp
+++ b/src/database-dummy.cpp
@@@ -1,36 -1,26 +1,60 @@@
  /*
++<<<<<<< HEAD
 +Minetest
 +Copyright (C) 2013 celeron55, Perttu Ahola <celeron55@gmail.com>
 +
 +This program is free software; you can redistribute it and/or modify
 +it under the terms of the GNU Lesser General Public License as published by
 +the Free Software Foundation; either version 2.1 of the License, or
 +(at your option) any later version.
 +
 +This program is distributed in the hope that it will be useful,
 +but WITHOUT ANY WARRANTY; without even the implied warranty of
 +MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 +GNU Lesser General Public License for more details.
 +
 +You should have received a copy of the GNU Lesser General Public License along
 +with this program; if not, write to the Free Software Foundation, Inc.,
 +51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 +*/
 +
 +/*
++=======
++>>>>>>> proller/wingsuit
  Dummy "database" class
  */
  
  
++<<<<<<< HEAD
 +#include "database-dummy.h"
 +
 +#include "map.h"
 +#include "mapsector.h"
 +#include "mapblock.h"
 +#include "serialization.h"
 +#include "main.h"
 +#include "settings.h"
 +#include "log.h"
++=======
+ #include "map.h"
+ #include "mapsector.h"
+ #include "mapblock.h"
+ #include "main.h"
+ #include "filesys.h"
+ #include "voxel.h"
+ #include "porting.h"
+ #include "mapgen.h"
+ #include "nodemetadata.h"
+ #include "settings.h"
+ #include "log.h"
+ #include "profiler.h"
+ #include "nodedef.h"
+ #include "gamedef.h"
+ #include "util/directiontables.h"
+ #include "rollback_interface.h"
+ 
+ #include "database-dummy.h"
++>>>>>>> proller/wingsuit
  
  Database_Dummy::Database_Dummy(ServerMap *map)
  {
diff --cc src/database-dummy.h
index 1474a4a,5a69213..0000000
--- a/src/database-dummy.h
+++ b/src/database-dummy.h
@@@ -1,30 -1,12 +1,42 @@@
++<<<<<<< HEAD
 +/*
 +Minetest
 +Copyright (C) 2013 celeron55, Perttu Ahola <celeron55@gmail.com>
 +
 +This program is free software; you can redistribute it and/or modify
 +it under the terms of the GNU Lesser General Public License as published by
 +the Free Software Foundation; either version 2.1 of the License, or
 +(at your option) any later version.
 +
 +This program is distributed in the hope that it will be useful,
 +but WITHOUT ANY WARRANTY; without even the implied warranty of
 +MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 +GNU Lesser General Public License for more details.
 +
 +You should have received a copy of the GNU Lesser General Public License along
 +with this program; if not, write to the Free Software Foundation, Inc.,
 +51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 +*/
 +
 +#ifndef DATABASE_DUMMY_HEADER
 +#define DATABASE_DUMMY_HEADER
 +
 +#include "database.h"
 +#include <map>
 +#include <string>
 +
 +class ServerMap;
++=======
+ #ifndef DATABASE_DUMMY_HEADER
+ #define DATABASE_DUMMY_HEADER
+ 
+ #include "map.h"
+ #include "mapsector.h"
+ #include "mapblock.h"
+ #include "main.h"
+ #include "filesys.h"
+ #include "database.h"
++>>>>>>> proller/wingsuit
  
  class Database_Dummy : public Database
  {
diff --cc src/database-leveldb.cpp
index 8f8d182,cb0101a..0000000
--- a/src/database-leveldb.cpp
+++ b/src/database-leveldb.cpp
@@@ -1,22 -1,3 +1,25 @@@
++<<<<<<< HEAD
 +/*
 +Minetest
 +Copyright (C) 2013 celeron55, Perttu Ahola <celeron55@gmail.com>
 +
 +This program is free software; you can redistribute it and/or modify
 +it under the terms of the GNU Lesser General Public License as published by
 +the Free Software Foundation; either version 2.1 of the License, or
 +(at your option) any later version.
 +
 +This program is distributed in the hope that it will be useful,
 +but WITHOUT ANY WARRANTY; without even the implied warranty of
 +MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 +GNU Lesser General Public License for more details.
 +
 +You should have received a copy of the GNU Lesser General Public License along
 +with this program; if not, write to the Free Software Foundation, Inc.,
 +51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 +*/
 +
++=======
++>>>>>>> proller/wingsuit
  #include "config.h"
  
  #if USE_LEVELDB
@@@ -25,16 -6,25 +28,38 @@@ LevelDB database
  */
  
  
++<<<<<<< HEAD
 +#include "database-leveldb.h"
 +#include "leveldb/db.h"
 +
 +#include "map.h"
 +#include "mapsector.h"
 +#include "mapblock.h"
 +#include "serialization.h"
 +#include "main.h"
 +#include "settings.h"
 +#include "log.h"
++=======
+ #include "map.h"
+ #include "mapsector.h"
+ #include "mapblock.h"
+ #include "main.h"
+ #include "filesys.h"
+ #include "voxel.h"
+ #include "porting.h"
+ #include "mapgen.h"
+ #include "nodemetadata.h"
+ #include "settings.h"
+ #include "log.h"
+ #include "profiler.h"
+ #include "nodedef.h"
+ #include "gamedef.h"
+ #include "util/directiontables.h"
+ #include "rollback_interface.h"
+ 
+ #include "database-leveldb.h"
+ #include "leveldb/db.h"
++>>>>>>> proller/wingsuit
  
  Database_LevelDB::Database_LevelDB(ServerMap *map, std::string savedir)
  {
diff --cc src/database-leveldb.h
index 5408f4c,9429921..0000000
--- a/src/database-leveldb.h
+++ b/src/database-leveldb.h
@@@ -1,34 -1,17 +1,51 @@@
++<<<<<<< HEAD
 +/*
 +Minetest
 +Copyright (C) 2013 celeron55, Perttu Ahola <celeron55@gmail.com>
 +
 +This program is free software; you can redistribute it and/or modify
 +it under the terms of the GNU Lesser General Public License as published by
 +the Free Software Foundation; either version 2.1 of the License, or
 +(at your option) any later version.
 +
 +This program is distributed in the hope that it will be useful,
 +but WITHOUT ANY WARRANTY; without even the implied warranty of
 +MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 +GNU Lesser General Public License for more details.
 +
 +You should have received a copy of the GNU Lesser General Public License along
 +with this program; if not, write to the Free Software Foundation, Inc.,
 +51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 +*/
 +
 +#ifndef DATABASE_LEVELDB_HEADER
 +#define DATABASE_LEVELDB_HEADER
 +
 +#include "config.h"
 +
 +#if USE_LEVELDB
 +
 +#include "database.h"
 +#include "leveldb/db.h"
 +#include <string>
 +
 +class ServerMap;
++=======
+ #include "config.h"
+ 
+ #if USE_LEVELDB
+ #ifndef DATABASE_LEVELDB_HEADER
+ #define DATABASE_LEVELDB_HEADER
+ 
+ #include "map.h"
+ #include "mapsector.h"
+ #include "mapblock.h"
+ #include "main.h"
+ #include "filesys.h"
+ #include "database.h"
+ 
+ #include "leveldb/db.h"
++>>>>>>> proller/wingsuit
  
  class Database_LevelDB : public Database
  {
diff --cc src/database-sqlite3.cpp
index feaccaa,1ae4d7a..0000000
--- a/src/database-sqlite3.cpp
+++ b/src/database-sqlite3.cpp
@@@ -1,23 -1,4 +1,26 @@@
  /*
++<<<<<<< HEAD
 +Minetest
 +Copyright (C) 2013 celeron55, Perttu Ahola <celeron55@gmail.com>
 +
 +This program is free software; you can redistribute it and/or modify
 +it under the terms of the GNU Lesser General Public License as published by
 +the Free Software Foundation; either version 2.1 of the License, or
 +(at your option) any later version.
 +
 +This program is distributed in the hope that it will be useful,
 +but WITHOUT ANY WARRANTY; without even the implied warranty of
 +MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 +GNU Lesser General Public License for more details.
 +
 +You should have received a copy of the GNU Lesser General Public License along
 +with this program; if not, write to the Free Software Foundation, Inc.,
 +51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 +*/
 +
 +/*
++=======
++>>>>>>> proller/wingsuit
  	SQLite format specification:
  	- Initially only replaces sectors/ and sectors2/
  	
@@@ -34,16 -15,24 +37,37 @@@
  			BLOB data
  */
  
++<<<<<<< HEAD
 +
 +#include "database-sqlite3.h"
 +
 +#include "map.h"
 +#include "mapsector.h"
 +#include "mapblock.h"
 +#include "serialization.h"
 +#include "main.h"
 +#include "settings.h"
 +#include "log.h"
++=======
+ #include "map.h"
+ #include "mapsector.h"
+ #include "mapblock.h"
+ #include "main.h"
+ #include "filesys.h"
+ #include "voxel.h"
+ #include "porting.h"
+ #include "mapgen.h"
+ #include "nodemetadata.h"
+ #include "settings.h"
+ #include "log.h"
+ #include "profiler.h"
+ #include "nodedef.h"
+ #include "gamedef.h"
+ #include "util/directiontables.h"
+ #include "rollback_interface.h"
+ 
+ #include "database-sqlite3.h"
++>>>>>>> proller/wingsuit
  
  Database_SQLite3::Database_SQLite3(ServerMap *map, std::string savedir)
  {
@@@ -108,13 -97,7 +132,16 @@@ void Database_SQLite3::verifyDatabase(
  		
  		if(needs_create)
  			createDatabase();
 -	
 +
++<<<<<<< HEAD
 +		d = sqlite3_exec(m_database, (std::string("PRAGMA synchronous = ") + itos(g_settings->getU16("sqlite_synchronous"))).c_str(), NULL, NULL, NULL);
 +		if(d != SQLITE_OK) {
 +			infostream<<"WARNING: Database pragma set failed: "<<sqlite3_errmsg(m_database)<<std::endl;
 +			throw FileNotGoodException("Cannot set pragma");
 +		}
 +
++=======
++>>>>>>> proller/wingsuit
  		d = sqlite3_prepare(m_database, "SELECT `data` FROM `blocks` WHERE `pos`=? LIMIT 1", -1, &m_database_read, NULL);
  		if(d != SQLITE_OK) {
  			infostream<<"WARNING: SQLite3 database read statment failed to prepare: "<<sqlite3_errmsg(m_database)<<std::endl;
diff --cc src/database-sqlite3.h
index f426f46,80ba028..0000000
--- a/src/database-sqlite3.h
+++ b/src/database-sqlite3.h
@@@ -1,34 -1,18 +1,50 @@@
++<<<<<<< HEAD
 +/*
 +Minetest
 +Copyright (C) 2013 celeron55, Perttu Ahola <celeron55@gmail.com>
 +
 +This program is free software; you can redistribute it and/or modify
 +it under the terms of the GNU Lesser General Public License as published by
 +the Free Software Foundation; either version 2.1 of the License, or
 +(at your option) any later version.
 +
 +This program is distributed in the hope that it will be useful,
 +but WITHOUT ANY WARRANTY; without even the implied warranty of
 +MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 +GNU Lesser General Public License for more details.
 +
 +You should have received a copy of the GNU Lesser General Public License along
 +with this program; if not, write to the Free Software Foundation, Inc.,
 +51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 +*/
 +
 +#ifndef DATABASE_SQLITE3_HEADER
 +#define DATABASE_SQLITE3_HEADER
 +
 +#include "database.h"
 +#include <string>
++=======
+ #ifndef DATABASE_SQLITE3_HEADER
+ #define DATABASE_SQLITE3_HEADER
+ 
+ #include "config.h"
+ #include "map.h"
+ #include "mapsector.h"
+ #include "mapblock.h"
+ #include "main.h"
+ #include "filesys.h"
+ #include "database.h"
++>>>>>>> proller/wingsuit
  
  extern "C" {
  	#include "sqlite3.h"
  }
  
++<<<<<<< HEAD
 +class ServerMap;
 +
++=======
++>>>>>>> proller/wingsuit
  class Database_SQLite3 : public Database
  {
  public:
diff --cc src/database.cpp
index b793cd2,771d9b9..0000000
--- a/src/database.cpp
+++ b/src/database.cpp
@@@ -1,24 -1,22 +1,46 @@@
++<<<<<<< HEAD
 +/*
 +Minetest
 +Copyright (C) 2013 celeron55, Perttu Ahola <celeron55@gmail.com>
 +
 +This program is free software; you can redistribute it and/or modify
 +it under the terms of the GNU Lesser General Public License as published by
 +the Free Software Foundation; either version 2.1 of the License, or
 +(at your option) any later version.
 +
 +This program is distributed in the hope that it will be useful,
 +but WITHOUT ANY WARRANTY; without even the implied warranty of
 +MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 +GNU Lesser General Public License for more details.
 +
 +You should have received a copy of the GNU Lesser General Public License along
 +with this program; if not, write to the Free Software Foundation, Inc.,
 +51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 +*/
 +
 +#include "database.h"
 +#include "irrlichttypes.h"
++=======
+ #include "map.h"
+ #include "mapsector.h"
+ #include "mapblock.h"
+ #include "main.h"
+ #include "filesys.h"
+ #include "voxel.h"
+ #include "porting.h"
+ #include "mapgen.h"
+ #include "nodemetadata.h"
+ #include "settings.h"
+ #include "log.h"
+ #include "profiler.h"
+ #include "nodedef.h"
+ #include "gamedef.h"
+ #include "util/directiontables.h"
+ #include "rollback_interface.h"
+ 
+ 
+ #include "database.h"
++>>>>>>> proller/wingsuit
  
  static s32 unsignedToSigned(s32 i, s32 max_positive)
  {
diff --cc src/database.h
index 79cabe6,337f274..0000000
--- a/src/database.h
+++ b/src/database.h
@@@ -1,29 -1,17 +1,46 @@@
++<<<<<<< HEAD
 +/*
 +Minetest
 +Copyright (C) 2013 celeron55, Perttu Ahola <celeron55@gmail.com>
 +
 +This program is free software; you can redistribute it and/or modify
 +it under the terms of the GNU Lesser General Public License as published by
 +the Free Software Foundation; either version 2.1 of the License, or
 +(at your option) any later version.
 +
 +This program is distributed in the hope that it will be useful,
 +but WITHOUT ANY WARRANTY; without even the implied warranty of
 +MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 +GNU Lesser General Public License for more details.
 +
 +You should have received a copy of the GNU Lesser General Public License along
 +with this program; if not, write to the Free Software Foundation, Inc.,
 +51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 +*/
 +
 +#ifndef DATABASE_HEADER
 +#define DATABASE_HEADER
 +
 +#include <list>
 +#include "irr_v3d.h"
 +
 +class MapBlock;
++=======
+ #ifndef DATABASE_HEADER
+ #define DATABASE_HEADER
+ 
+ #include "config.h"
+ #include "map.h"
+ #include "mapsector.h"
+ #include "mapblock.h"
+ #include "main.h"
+ #include "filesys.h"
+ #include "serialization.h"
+ #include <list>
+ 
+ class Database;
+ class ServerMap;
++>>>>>>> proller/wingsuit
  
  class Database
  {
diff --cc src/main.cpp
index dfe1e5c,dc67f29..0000000
--- a/src/main.cpp
+++ b/src/main.cpp
@@@ -77,13 -77,12 +77,18 @@@ with this program; if not, write to th
  #include "quicktune.h"
  #include "serverlist.h"
  #include "guiEngine.h"
 +#include "mapsector.h"
 +
 +#include "database-sqlite3.h"
 +#ifdef USE_LEVELDB
 +#include "database-leveldb.h"
 +#endif
  
+ #ifdef USE_LEVELDB
+ #include "database-sqlite3.h"
+ #include "database-leveldb.h"
+ #endif
+ 
  /*
  	Settings.
  	These are loaded from the config file.
@@@ -795,8 -794,10 +800,15 @@@ int main(int argc, char *argv[]
  			_("Set logfile path ('' = no logging)"))));
  	allowed_options.insert(std::make_pair("gameid", ValueSpec(VALUETYPE_STRING,
  			_("Set gameid (\"--gameid list\" prints available ones)"))));
++<<<<<<< HEAD
 +	allowed_options.insert(std::make_pair("migrate", ValueSpec(VALUETYPE_STRING,
 +			_("Migrate from current map backend to another (Only works when using minetestserver or with --server)"))));
++=======
+ 	#if USE_LEVELDB
+ 	allowed_options.insert(std::make_pair("migrate", ValueSpec(VALUETYPE_STRING,
+ 			_("Migrate from current map backend to another (Only works when using minetestserver or with --server)"))));
+ 	#endif
++>>>>>>> proller/wingsuit
  #ifndef SERVER
  	allowed_options.insert(std::make_pair("videomodes", ValueSpec(VALUETYPE_FLAG,
  			_("Show available video modes"))));
@@@ -1217,6 -1218,7 +1229,10 @@@
  		// Create server
  		Server server(world_path, gamespec, false);
  
++<<<<<<< HEAD
++=======
+ 		#if USE_LEVELDB
++>>>>>>> proller/wingsuit
  		// Database migration
  		if (cmd_args.exists("migrate")) {
  			std::string migrate_to = cmd_args.get("migrate");
@@@ -1239,10 -1241,8 +1255,15 @@@
  			}
  			if (migrate_to == "sqlite3")
  				new_db = new Database_SQLite3(&(ServerMap&)server.getMap(), world_path);
++<<<<<<< HEAD
 +			#if USE_LEVELDB
 +			else if (migrate_to == "leveldb")
 +				new_db = new Database_LevelDB(&(ServerMap&)server.getMap(), world_path);
 +			#endif
++=======
+ 			else if (migrate_to == "leveldb")
+ 				new_db = new Database_LevelDB(&(ServerMap&)server.getMap(), world_path);
++>>>>>>> proller/wingsuit
  			else {
  				errorstream << "Migration to " << migrate_to << " is not supported" << std::endl;
  				return 1;
@@@ -1274,6 -1274,7 +1295,10 @@@
  
  			return 0;
  		}
++<<<<<<< HEAD
++=======
+ 		#endif
++>>>>>>> proller/wingsuit
  
  		server.start(port);
  		
diff --cc src/map.cpp
index 821e0a5,e2191f9..0000000
--- a/src/map.cpp
+++ b/src/map.cpp
@@@ -38,7 -38,6 +38,10 @@@ with this program; if not, write to th
  #include "emerge.h"
  #include "mapgen_v6.h"
  #include "biome.h"
++<<<<<<< HEAD
 +#include "config.h"
++=======
++>>>>>>> proller/wingsuit
  #include "database.h"
  #include "database-dummy.h"
  #include "database-sqlite3.h"
diff --cc src/map.h
index a7fa8c1,15725f0..0000000
--- a/src/map.h
+++ b/src/map.h
@@@ -33,8 -33,8 +33,13 @@@ with this program; if not, write to th
  #include "modifiedstate.h"
  #include "util/container.h"
  #include "nodetimer.h"
++<<<<<<< HEAD
 +
 +class Database;
++=======
+ #include "database.h"
+ 
++>>>>>>> proller/wingsuit
  class ClientMap;
  class MapSector;
  class ServerMapSector;




!!!!!!!!!!!!!!!!!
 Merge sapier/avoid_facedir_if_not_moving to next failed:

# On branch next
# You have unmerged paths.
#   (fix conflicts and run "git commit")
#
# Unmerged paths:
#   (use "git add <file>..." to mark resolution)
#
#	both modified:      src/content_cao.cpp
#	both modified:      src/content_sao.cpp
#
no changes added to commit (use "git add" and/or "git commit -a")
diff --cc src/content_cao.cpp
index e97e3a1,fb4bc95..0000000
--- a/src/content_cao.cpp
+++ b/src/content_cao.cpp
@@@ -1211,9 -1211,9 +1211,15 @@@ public
  			updateNodePos();
  		}
  
++<<<<<<< HEAD
 +		if (getParent() == NULL && m_prop.automatic_face_movement_dir &&
 +				(fabs(m_velocity.Z) > 0.001 || fabs(m_velocity.X) > 0.001)){
 +			m_yaw = atan2(m_velocity.Z,m_velocity.X) * 180 / M_PI + m_prop.automatic_face_movement_dir_offset;
++=======
+ 		if ((getParent() == NULL && m_prop.automatic_face_movement_dir) &&
+ 			((m_velocity.Z != 0) || (m_velocity.X != 0))){
+ 			m_yaw = atan2(m_velocity.Z,m_velocity.X) * 180 / M_PI;
++>>>>>>> sapier/avoid_facedir_if_not_moving
  			updateNodePos();
  		}
  	}
diff --cc src/content_sao.cpp
index 85ab8d3,92cabfb..0000000
--- a/src/content_sao.cpp
+++ b/src/content_sao.cpp
@@@ -527,9 -527,9 +527,14 @@@ void LuaEntitySAO::step(float dtime, bo
  			m_velocity += dtime * m_acceleration;
  		}
  
 -		if( (m_prop.automatic_face_movement_dir) &&
 +		if((m_prop.automatic_face_movement_dir) &&
++<<<<<<< HEAD
 +				(fabs(m_velocity.Z) > 0.001 || fabs(m_velocity.X) > 0.001)){
 +			m_yaw = atan2(m_velocity.Z,m_velocity.X) * 180 / M_PI + m_prop.automatic_face_movement_dir_offset;
++=======
+ 			((m_velocity.Z != 0) || (m_velocity.X != 0))){
+ 			m_yaw = atan2(m_velocity.Z,m_velocity.X) * 180 / M_PI;
++>>>>>>> sapier/avoid_facedir_if_not_moving
  		}
  	}
  




!!!!!!!!!!!!!!!!!
 Merge Novatux/forceload to next failed:

# On branch next
# You have unmerged paths.
#   (fix conflicts and run "git commit")
#
# Changes to be committed:
#
#	modified:   doc/lua_api.txt
#	modified:   minetest.conf.example
#	modified:   src/defaultsettings.cpp
#	modified:   src/environment.cpp
#
# Unmerged paths:
#   (use "git add <file>..." to mark resolution)
#
#	both modified:      src/object_properties.cpp
#	both modified:      src/object_properties.h
#
diff --cc src/object_properties.cpp
index f560f59,162cc67..0000000
--- a/src/object_properties.cpp
+++ b/src/object_properties.cpp
@@@ -42,7 -42,7 +42,11 @@@ ObjectProperties::ObjectProperties()
  	automatic_rotate(0),
  	stepheight(0),
  	automatic_face_movement_dir(false),
++<<<<<<< HEAD
 +	automatic_face_movement_dir_offset(0.0)
++=======
+ 	force_load(false)
++>>>>>>> Novatux/forceload
  {
  	textures.push_back("unknown_object.png");
  	colors.push_back(video::SColor(255,255,255,255));
@@@ -105,7 -106,7 +110,11 @@@ void ObjectProperties::serialize(std::o
  	writeU8(os, collideWithObjects);
  	writeF1000(os,stepheight);
  	writeU8(os, automatic_face_movement_dir);
++<<<<<<< HEAD
 +	writeF1000(os, automatic_face_movement_dir_offset);
++=======
+ 	writeU8(os, force_load);
++>>>>>>> Novatux/forceload
  	// Add stuff only at the bottom.
  	// Never remove anything, because we don't want new versions of this
  }
@@@ -141,7 -142,7 +150,11 @@@ void ObjectProperties::deSerialize(std:
  			collideWithObjects = readU8(is);
  			stepheight = readF1000(is);
  			automatic_face_movement_dir = readU8(is);
++<<<<<<< HEAD
 +			automatic_face_movement_dir_offset = readF1000(is);
++=======
+ 			force_load = readU8(is);
++>>>>>>> Novatux/forceload
  		}catch(SerializationError &e){}
  	}
  	else
diff --cc src/object_properties.h
index 4b7f9a5,dbcbba5..0000000
--- a/src/object_properties.h
+++ b/src/object_properties.h
@@@ -46,7 -46,7 +46,11 @@@ struct ObjectPropertie
  	float automatic_rotate;
  	f32 stepheight;
  	bool automatic_face_movement_dir;
++<<<<<<< HEAD
 +	f32 automatic_face_movement_dir_offset;
++=======
+ 	bool force_load;
++>>>>>>> Novatux/forceload
  
  
  	ObjectProperties();




!!!!!!!!!!!!!!!!!
 Merge sapier/autoupdate_anim_speed to next failed:

# On branch next
# You have unmerged paths.
#   (fix conflicts and run "git commit")
#
# Changes to be committed:
#
#	modified:   doc/lua_api.txt
#	modified:   src/content_cao.cpp
#	modified:   src/content_sao.cpp
#	modified:   src/content_sao.h
#	modified:   src/genericobject.cpp
#	modified:   src/genericobject.h
#	modified:   src/script/lua_api/l_object.cpp
#	modified:   src/serverobject.h
#	modified:   src/util/numeric.h
#
# Unmerged paths:
#   (use "git add <file>..." to mark resolution)
#
#	both modified:      src/clientserver.h
#
diff --cc src/clientserver.h
index 6a7cbda,cc5b072..0000000
--- a/src/clientserver.h
+++ b/src/clientserver.h
@@@ -95,11 -99,12 +95,17 @@@ with this program; if not, write to th
  		TOCLIENT_BREATH
  		TOSERVER_BREATH
  		range added to ItemDefinition
 -		drowning, leveled and liquid_range added to ContentFeatures
 +		drowning, leveled added to ContentFeatures
  		stepheight and collideWithObjects added to object properties
  		version, heat and humidity transfer in MapBock
++<<<<<<< HEAD
 +		automatic_face_movement_dir and automatic_face_movement_dir_offset
 +			added to object properties
++=======
+ 		added new property to entities automatic_face_movement_dir
+ 		Add parameter to GENERIC_CMD_SET_ANIMATION
+ 		Add support for anim framerate prediction based uppon base_velocity
++>>>>>>> sapier/autoupdate_anim_speed
  */
  
  #define LATEST_PROTOCOL_VERSION 21




!!!!!!!!!!!!!!!!!
 Merge sapier/add_surface_detection_function to next failed:

# On branch next
# You have unmerged paths.
#   (fix conflicts and run "git commit")
#
# Changes to be committed:
#
#	modified:   doc/lua_api.txt
#	modified:   src/environment.h
#	modified:   src/map.cpp
#	modified:   src/map.h
#
# Unmerged paths:
#   (use "git add <file>..." to mark resolution)
#
#	both modified:      src/script/lua_api/l_env.cpp
#	both modified:      src/script/lua_api/l_env.h
#
diff --cc src/script/lua_api/l_env.cpp
index 731e730,47e9963..0000000
--- a/src/script/lua_api/l_env.cpp
+++ b/src/script/lua_api/l_env.cpp
@@@ -781,40 -937,49 +805,84 @@@ int ModApiEnvMod::l_get_humidity(lua_St
  }
  
  
 -bool ModApiEnvMod::Initialize(lua_State *L,int top)
 -{
 +void ModApiEnvMod::Initialize(lua_State *L, int top)
 +{
++<<<<<<< HEAD
 +	API_FCT(set_node);
 +	API_FCT(add_node);
 +	API_FCT(add_item);
 +	API_FCT(remove_node);
 +	API_FCT(get_node);
 +	API_FCT(get_node_or_nil);
 +	API_FCT(get_node_light);
 +	API_FCT(place_node);
 +	API_FCT(dig_node);
 +	API_FCT(punch_node);
 +	API_FCT(get_node_max_level);
 +	API_FCT(get_node_level);
 +	API_FCT(set_node_level);
 +	API_FCT(add_node_level);
 +	API_FCT(add_entity);
 +	API_FCT(get_meta);
 +	API_FCT(get_node_timer);
 +	API_FCT(get_player_by_name);
 +	API_FCT(get_objects_inside_radius);
 +	API_FCT(set_timeofday);
 +	API_FCT(get_timeofday);
 +	API_FCT(get_gametime);
 +	API_FCT(find_node_near);
 +	API_FCT(find_nodes_in_area);
 +	API_FCT(get_perlin);
 +	API_FCT(get_perlin_map);
 +	API_FCT(get_voxel_manip);
 +	API_FCT(clear_objects);
 +	API_FCT(spawn_tree);
 +	API_FCT(find_path);
 +	API_FCT(line_of_sight);
 +	API_FCT(transforming_liquid_add);
 +	API_FCT(get_heat);
 +	API_FCT(get_humidity);
++=======
+ 
+ 	bool retval = true;
+ 
+ 	retval &= API_FCT(set_node);
+ 	retval &= API_FCT(add_node);
+ 	retval &= API_FCT(add_item);
+ 	retval &= API_FCT(remove_node);
+ 	retval &= API_FCT(get_node);
+ 	retval &= API_FCT(get_node_or_nil);
+ 	retval &= API_FCT(get_node_light);
+ 	retval &= API_FCT(place_node);
+ 	retval &= API_FCT(dig_node);
+ 	retval &= API_FCT(punch_node);
+ 	retval &= API_FCT(get_node_max_level);
+ 	retval &= API_FCT(get_node_level);
+ 	retval &= API_FCT(set_node_level);
+ 	retval &= API_FCT(add_node_level);
+ 	retval &= API_FCT(add_entity);
+ 	retval &= API_FCT(get_meta);
+ 	retval &= API_FCT(get_node_timer);
+ 	retval &= API_FCT(get_player_by_name);
+ 	retval &= API_FCT(get_objects_inside_radius);
+ 	retval &= API_FCT(set_timeofday);
+ 	retval &= API_FCT(get_timeofday);
+ 	retval &= API_FCT(find_node_near);
+ 	retval &= API_FCT(find_nodes_in_area);
+ 	retval &= API_FCT(get_perlin);
+ 	retval &= API_FCT(get_perlin_map);
+ 	retval &= API_FCT(get_voxel_manip);
+ 	retval &= API_FCT(get_mapgen_object);
+ 	retval &= API_FCT(set_mapgen_params);
+ 	retval &= API_FCT(clear_objects);
+ 	retval &= API_FCT(get_surface);
+ 	retval &= API_FCT(spawn_tree);
+ 	retval &= API_FCT(find_path);
+ 	retval &= API_FCT(line_of_sight);
+ 	retval &= API_FCT(transforming_liquid_add);
+ 	retval &= API_FCT(get_heat);
+ 	retval &= API_FCT(get_humidity);
+ 
+ 	return retval;
++>>>>>>> sapier/add_surface_detection_function
  }
 -
 -ModApiEnvMod modapienv_prototype;
diff --cc src/script/lua_api/l_env.h
index 5f3467f,b01fe5a..0000000
--- a/src/script/lua_api/l_env.h
+++ b/src/script/lua_api/l_env.h
@@@ -147,8 -159,13 +147,16 @@@ private
  	static int l_get_heat(lua_State *L);
  	static int l_get_humidity(lua_State *L);
  	
++<<<<<<< HEAD
++=======
+ 	// minetest.get_surface(basepos,yoffset,walkable_only=false)
+ 	static int l_get_surface(lua_State *L);
+ 
+ 	static struct EnumString es_MapgenObject[];
+ 	
++>>>>>>> sapier/add_surface_detection_function
  public:
 -	bool Initialize(lua_State *L, int top);
 +	static void Initialize(lua_State *L, int top);
  };
  
  class LuaABM : public ActiveBlockModifier
